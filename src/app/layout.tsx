// /src/app/layout.tsx
import React from "react";
import type { Metadata, Viewport } from "next";
import { headers } from "next/headers";
import Script from "next/script";
import "./globals.css";

import Navbar from "./lib/Navbar/Navbar";
import {
  Geist,
  Geist_Mono,
  Roboto_Condensed,
  Ubuntu_Condensed,
  Noto_Sans,
} from "next/font/google";

// --- Fonts (unchanged) ---
const geistSans = Geist({ variable: "--font-geist-sans", subsets: ["latin"] });
const geistMono = Geist_Mono({ variable: "--font-geist-mono", subsets: ["latin"] });

const robotoCondensed = Roboto_Condensed({
  subsets: ["latin", "greek"],
  weight: ["300", "400", "700"],
  variable: "--font-roboto-condensed",
  display: "swap",
});

const ubuntuCondensed = Ubuntu_Condensed({
  subsets: ["latin", "greek"],
  weight: ["400"],
  variable: "--font-ubuntu-condensed",
  display: "swap",
});

const notoSans = Noto_Sans({
  subsets: ["latin", "greek"],
  weight: ["400", "700"],
  variable: "--font-noto-sans",
  display: "swap",
});

// --- Metadata (unchanged) ---
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export const viewport: Viewport = {
  width: "device-width",
  initialScale: 1,
  viewportFit: "cover",
  // maximumScale: 1,
};

// Optional helper to avoid repeating nonce={...} on every <Script>
function NoncedScript(
  props: Omit<React.ComponentProps<typeof Script>, "nonce"> & { nonce: string | undefined }
) {
  const { nonce, ...rest } = props;
  return <Script {...rest} nonce={nonce} />;
}

export default async function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  // ðŸ‘‡ In your Next version, headers() is async
  const h = await headers();
  const nonce = h.get("x-nonce") ?? undefined;

  const htmlClass = [
    robotoCondensed.variable,
    ubuntuCondensed.variable,
    notoSans.variable,
    geistSans.variable,
    geistMono.variable,
  ].join(" ");

  // Keep your createElement style
  return React.createElement(
    "html",
    { lang: "el", className: htmlClass, suppressHydrationWarning: true },
    [
      React.createElement(
        "head",
        { key: "head" },
        [
          // Safe inline script (nonced)
          React.createElement(
            NoncedScript,
            {
              id: "boot",
              strategy: "beforeInteractive",
              nonce,
              key: "boot-script",
            },
            `window.__BOOT_TS__ = Date.now();`
          ),
          // Safe inline style (nonced)
          React.createElement(
            "style",
            { key: "nonce-style", nonce },
            `:root { --brand-h: 220 }`
          ),
          // Example external script (uncomment & adjust if needed)
          // React.createElement(NoncedScript, {
          //   key: "3p-widget",
          //   src: "https://example-cdn.com/widget.js",
          //   strategy: "afterInteractive",
          //   nonce,
          // }),
        ]
      ),
      React.createElement(
        "body",
        { key: "body", className: "antialiased font-sans", suppressHydrationWarning: true },
        [
          React.createElement(Navbar, { key: "nav" }),
          children,
          React.createElement(
            NoncedScript,
            { id: "after-hydrate", strategy: "afterInteractive", nonce, key: "after-hydrate" },
            `console.debug("hydrated");`
          ),
        ]
      ),
    ]
  );
}
